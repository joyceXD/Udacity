setwd("C:/Project/Udacity/4 ExploreAndSummarizeData/lesson4")
load("C:/Project/Udacity/4 ExploreAndSummarizeData/lesson4/.RData")
library(ggplot2)
load("./.RData")
library(ggplot2)
load("./.RData")
pf.fc_by_age <- pf %>%
group_by(age) %>%
summarise(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
arrange(age)
head(pf.fc_by_age)
View(pf.fc_by_age)
View(pf.fc_by_age)
# Plot mean friend count vs. age using a line graph.
# Be sure you use the correct variable names
# and the correct data frame. You should be working
# with the new data frame created from the dplyr
# functions. The data frame is called 'pf.fc_by_age'.
# Use geom_line() rather than geom_point to create
# the plot. You can look up the documentation for
# geom_line() to see what it does.
ggplot(data = pf.fc_by_age, aes(x = age, y = friend_count_mean)) +
geom_line()
# Plot mean friend count vs. age using a line graph.
# Be sure you use the correct variable names
# and the correct data frame. You should be working
# with the new data frame created from the dplyr
# functions. The data frame is called 'pf.fc_by_age'.
# Use geom_line() rather than geom_point to create
# the plot. You can look up the documentation for
# geom_line() to see what it does.
ggplot(data = pf.fc_by_age, aes(x = age, y = friend_count_mean)) +
geom_line() +
geom_point()
ggplot(aes(x = age, y = friend_count), data = pf) +
xlim(13, 90) +
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange') +
coord_trans(y = 'sqrt') +
geom_line()
ggplot(aes(x = age, y = friend_count), data = pf) +
xlim(13, 90) +
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange') +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean)
ggplot(aes(x = age, y = friend_count), data = pf) +
xlim(13, 90) +
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange') +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, probs = .1,
linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, probs = .9,
linetype = 2, color = 'blue')
ggplot(aes(x = age, y = friend_count), data = pf) +
xlim(13, 90) +
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange') +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = .1),
linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = .9),
linetype = 2, color = 'blue')
?coord_cartesian
ggplot(aes(x = age, y = friend_count), data = pf) +
coord_cartesian(xlim = c=(13, 90)) +
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange') +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = .1),
linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = .9),
linetype = 2, color = 'blue')
ggplot(aes(x = age, y = friend_count), data = pf) +
coord_cartesian(xlim = c(13, 90)) +
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange') +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = .1),
linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = .9),
linetype = 2, color = 'blue')
p <- ggplot(mtcars, aes(disp, wt)) +
geom_point() +
geom_smooth()
p
p + scale_x_continuous(limits = c(325, 500))
p + coord_cartesian(xlim = c(325, 500))
p
p + scale_x_continuous(limits = c(325, 500))
p + coord_cartesian(xlim = c(325, 500))
ggplot(aes(x = age, y = friend_count), data = pf) +
coord_cartesian(xlim = c(13, 90)) +
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange') +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = .1),
linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = .9),
linetype = 2, color = 'blue')
ggplot(aes(x = age, y = friend_count), data = pf) +
coord_cartesian(xlim = c(13, 90)) +
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange') +
#  coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = .1),
linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = .9),
linetype = 2, color = 'blue')
cor.test(x = pf$age, y = pf$friend_count,
method = 'pearson')
with(pf, cor.test(age, friend_count, method = 'pearson'))
with(subset(pf, age <= 70), cor.test(age, friend_count, method = 'pearson'))
with(subset(pf, age <= 70), cor.test(age, friend_count, method = 'pearson'))
with(subset(pf, age < 70), cor.test(age, friend_count, method = 'pearson'))
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
ggplot(data = pf, aes(x = www_likes_received, y = likes_received)) +
geom_point()
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
ggplot(data = pf, aes(x = www_likes_received, y = likes_received)) +
geom_point() +
scale_x_log10() +
scale_y_log10()
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
ggplot(data = pf, aes(x = www_likes_received, y = likes_received)) +
geom_point() +
scale_x_sqrt() +
scale_y_sqrt()
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
ggplot(data = pf, aes(x = www_likes_received+1, y = likes_received+1)) +
geom_point() +
scale_x_log10() +
scale_y_log10()
ggplot(data = pf, aes(x = www_likes_received, y = likes_received)) +
geom_point() +
xlim(0, quantile(pf$www_likes_received, 0.95)) +
ylim(0, quantile(pf$likes_received, 0.95))
ggplot(data = pf, aes(x = www_likes_received, y = likes_received)) +
geom_point() +
xlim(0, quantile(pf$www_likes_received, 0.95)) +
ylim(0, quantile(pf$likes_received, 0.95)) +
geom_smooth(method = 'lm', color = 'red')
with(pf, cor.test(www_likes_received, likes_received)
)
install.packages('alr3')
library(alr3)
data(Mitchell)
?Mitchell
head(Mitchell)
ggplot(data = Mitchell, aes(x = Month, y = Temp)) +
geom_point()
tail(Mitchell)
ggplot(data = Mitchell, aes(x = Month, y = Temp)) +
geom_line()
#  geom_point()
with(Mitchell, cor.test(Month, Temp))
ggplot(data = Mitchell, aes(x = Month, y = Temp)) +
geom_line() +
scale_x_continuous(breaks = seq(0, max(Mitchell$Month), 12))
ggplot(data = pf.fc_by_age,
aes(x = age, y = friend_count_mean)) +
geom_line()
head(pf.fc_by_age, 10)
pf.fc_by_age[17:19, ]
View(pf.fc_by_age)
as.POSIXlt(as.Date("1990-10-08", origin="1900-01-01"))
str(as.POSIXlt(as.Date("1990-10-08", origin="1900-01-01")))
as.POSIXlt(as.Date("1990-10-08", origin="1900-01-01"))$year
as.POSIXlt(as.Date("1990-10-08", origin="1900-01-01"))$mon
with(pf, paste(dob_year, dob_month, dob_day, sep = '-'))
# Create a new variable, 'age_with_months', in the 'pf' data frame.
# Be sure to save the variable in the data frame rather than creating
# a separate, stand-alone variable. You will need to use the variables
# 'age' and 'dob_month' to create the variable 'age_with_months'.
# Assume the reference date for calculating age is December 31, 2013.
month_count <- function(date){
lt <- as.POSIXlt(as.Date(date, origin="1900-01-01"))
lt$year*12 + lt$mon
}
month_diff <- function(date1, date2) {
month_count(date1) - month_count(date2)
}
pf$dob <- with(pf, paste(dob_year, dob_month, dob_day, sep = '-'))
pf$age_with_months <- month_diff('2013-12-31', pf$dob)
View(pf)
# Create a new data frame called
# pf.fc_by_age_months that contains
# the mean friend count, the median friend
# count, and the number of users in each
# group of age_with_months. The rows of the
# data framed should be arranged in increasing
# order by the age_with_months variable.
# For example, the first two rows of the resulting
# data frame would look something like...
# age_with_months  friend_count_mean	friend_count_median	n
#              13           275.0000                  275 2
#        13.25000           133.2000                  101 11
library(dplyr)
pf.fc_by_age_months <- pf %>%
group_by(age_with_months) %>%
summarize(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
arrange(age_with_months)
View(pf.fc_by_age_months)
pf <- pf[-c(17), ]
View(pf)
pf <- pf[-c(16), ]
View(pf)
rm(p)
load("C:/Project/Udacity/4 ExploreAndSummarizeData/lesson3/.RData")
# Create a new variable, 'age_with_months', in the 'pf' data frame.
# Be sure to save the variable in the data frame rather than creating
# a separate, stand-alone variable. You will need to use the variables
# 'age' and 'dob_month' to create the variable 'age_with_months'.
# Assume the reference date for calculating age is December 31, 2013.
month_count <- function(date){
lt <- as.POSIXlt(as.Date(date, origin="1900-01-01"))
lt$year*12 + lt$mon
}
month_diff <- function(date1, date2) {
month_count(date1) - month_count(date2)
}
pf$dob <- with(pf, paste(dob_year, dob_month, dob_day, sep = '-'))
pf$age_with_months <- month_diff('2013-12-31', pf$dob) / 12
View(pf)
# Create a new data frame called
# pf.fc_by_age_months that contains
# the mean friend count, the median friend
# count, and the number of users in each
# group of age_with_months. The rows of the
# data framed should be arranged in increasing
# order by the age_with_months variable.
# For example, the first two rows of the resulting
# data frame would look something like...
# age_with_months  friend_count_mean	friend_count_median	n
#              13           275.0000                  275 2
#        13.25000           133.2000                  101 11
library(dplyr)
pf.fc_by_age_months <- pf %>%
group_by(age_with_months) %>%
summarize(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
arrange(age_with_months)
View(pf.fc_by_age_months)
View(pf.fc_by_age_months)
# Create a new scatterplot showing friend_count_mean
# versus the new variable, age_with_months. Be sure to use
# the correct data frame (the one you create in the last
# exercise) AND subset the data to investigate
# users with ages less than 71.
ggplot(data = subset(pf.fc_by_age_months, age_with_months < 71),
aes(x = age_with_months,
y = friend_count_mean)) +
geom_point()
# Create a new scatterplot showing friend_count_mean
# versus the new variable, age_with_months. Be sure to use
# the correct data frame (the one you create in the last
# exercise) AND subset the data to investigate
# users with ages less than 71.
ggplot(data = subset(pf.fc_by_age_months, age_with_months < 71),
aes(x = age_with_months,
y = friend_count_mean)) +
geom_line()
View(pf.fc_by_age)
library(gridExtra)
p1 <- ggplot(data = subset(pf.fc_by_age, age < 71),
aes(x = age_with_months,
y = friend_count_mean)) +
geom_line()
p2 <- ggplot(data = subset(pf.fc_by_age_months, age_with_months < 71),
aes(x = age_with_months,
y = friend_count_mean)) +
geom_line()
grid.arrange(p2, p1, ncol = 1)
library(gridExtra)
p1 <- ggplot(data = subset(pf.fc_by_age, age < 71),
aes(x = age_with_months,
y = friend_count_mean)) +
geom_line()
p2 <- ggplot(data = subset(pf.fc_by_age_months, age_with_months < 71),
aes(x = age_with_months,
y = friend_count_mean)) +
geom_line()
grid.arrange(p2, p1, ncol = 1)
p2 <- ggplot(data = subset(pf.fc_by_age_months, age_with_months < 71),
aes(x = age_with_months,
y = friend_count_mean)) +
geom_line()
library(gridExtra)
p1 <- ggplot(data = subset(pf.fc_by_age, age < 71),
aes(x = age,
y = friend_count_mean)) +
geom_line()
p2 <- ggplot(data = subset(pf.fc_by_age_months, age_with_months < 71),
aes(x = age_with_months,
y = friend_count_mean)) +
geom_line()
grid.arrange(p2, p1, ncol = 1)
library(gridExtra)
p1 <- ggplot(data = subset(pf.fc_by_age, age < 71),
aes(x = age,
y = friend_count_mean)) +
geom_line()
p2 <- ggplot(data = subset(pf.fc_by_age_months, age_with_months < 71),
aes(x = age_with_months,
y = friend_count_mean)) +
geom_line()
p3 <- ggplot(data = subset(pf, age < 71),
aes(x = round(age / 5)*5, y = friend_count))
grid.arrange(p3, p2, p1, ncol = 1)
library(gridExtra)
p1 <- ggplot(data = subset(pf.fc_by_age, age < 71),
aes(x = age,
y = friend_count_mean)) +
geom_line()
p2 <- ggplot(data = subset(pf.fc_by_age_months, age_with_months < 71),
aes(x = age_with_months,
y = friend_count_mean)) +
geom_line()
p3 <- ggplot(data = subset(pf, age < 71),
aes(x = round(age / 5)*5, y = friend_count)) +
geom_line()
grid.arrange(p3, p2, p1, ncol = 1)
library(gridExtra)
p1 <- ggplot(data = subset(pf.fc_by_age, age < 71),
aes(x = age,
y = friend_count_mean)) +
geom_line()
p2 <- ggplot(data = subset(pf.fc_by_age_months, age_with_months < 71),
aes(x = age_with_months,
y = friend_count_mean)) +
geom_line()
p3 <- ggplot(data = subset(pf, age < 71),
aes(x = round(age / 5)*5, y = friend_count)) +
geom_line(stat = 'summary', fun.y = mean)
grid.arrange(p3, p2, p1, ncol = 1)
library(gridExtra)
p1 <- ggplot(data = subset(pf.fc_by_age, age < 71),
aes(x = age,
y = friend_count_mean)) +
geom_line() +
geom_smooth()
p2 <- ggplot(data = subset(pf.fc_by_age_months, age_with_months < 71),
aes(x = age_with_months,
y = friend_count_mean)) +
geom_line() +
geom_smooth()
p3 <- ggplot(data = subset(pf, age < 71),
aes(x = round(age / 5)*5, y = friend_count)) +
geom_line(stat = 'summary', fun.y = mean)
grid.arrange(p3, p2, p1, ncol = 1)
